# =======================================
# TESTING
# =======================================
# type Post {
#     id: String!
#     text: String!
#     comments: [Comment] @relation(onDelete: CASCADE)
#     user: User! @role(onCreate: "own", onUpdateDelete: "own")
# }

# type UserFriend {
#     _id: String
#     user: User!
#     friend: User!
# }

# type User {
#     phoneNumbers: String
#     image: String
# }

# type Comment {
#     _id: String
#     post: Post!
#     text: String!
#     user: User! @role(onCreate: "own", onUpdateDelete: "own")
# }


# =======================================
# RAJAKARCIS
# =======================================

# ADMIN
type Type {
    id: String
    name: String!
}

type Category {
    id: String
    name: String!
    subCategories: [SubCategory] @relation(onDelete: CASCADE)
}

type SubCategory {
    id: String
    category: Category!
    name: String!
}

type Bank {
    id: String
    name: String!
}

# USER
type User {
    phoneNumber: String
    image: String
}

type Event {
    id: String
    user: User! @role(onCreate: "own", onDelete: "own")
    name: String!
    locationType: String @default(value: "tbd")
    locationName: String
    latitude: String
    longitude: String
    address: String
    state: String
    postalCode: String
    city: String
    country: String
    type: Type
    category: Category
    subCategory: SubCategory
    startDate: String!
    endDate: String!
    startTime: String
    endTime: String
    tickets: [Ticket] @relation(onDelete: CASCADE)
    images: [Image] @relation(onDelete: CASCADE)
    tags: [Tag] @relation(onDelete: CASCADE)
    description: String!
    organizer: String
    termsAndCondition: String
    refundPolicy: String
    link: String
}

type Image {
    id: String
    name: String
    link: String! @File
    event: Event!
}

type Tag {
    id: String
    name: String
}

type Ticket {
    id: String
    event: Event!
    type: String!
    name: String!
    qty: Int!
    price: Int!
    includeFees: Boolean
    startDate: String!
    endDate: String!
    startTime: String
    endTime: String
    description: String
    visibility: Boolean
    orderMinQty: Int
    orderMaxQty: Int
    salesChannel: String
    sold: Boolean
}

type EventTaxe {
    id: String
    event: Event!
    ticket: Ticket!
    isUsingTax: Boolean
    taxName: String
    taxRate: String
}

type Payout {
    id: String
    user: User!
    bank: Bank!
    accountHolder: String!
    name: String!
    address1: String!
    address2: String
    city: String
    postalCode: String
    state: String
    bank: Bank!
    branch: String!
    accountNumber: String!
    accountNickname: String
}

type EventReport {
    id: String
    event: Event!
    totalTicketAvailable: Int
    totalTicketPending: Int
    totalTicketSold: Int
    pageViews: Int
    totalPayoutUnpaid: Int
    totalPayoutPaid: Int
}

type EventSale {
    id: String
    event: Event!
    ticket: Ticket!
    price: Int
    firstName: String
    lastName: String
    email: String
    phoneNumber: String
}

type UsersTicket {
    id: String
    user: User! @role(onCreate: "own", onUpdateDelete: "own")
    event: Event!
    ticket: Ticket!
}

type Order {
    id: String
    event: Event!
    ticket: Ticket!
    user: User! @role(onCreate: "own", onUpdateDelete: "own")
    price: Int!
    fee: Int!
    qty: Int!
    subtotal: Int!
    transaction: Transaction
}

type Transaction {
    id: String
    user: User!
    firstName: String!
    lastName: String!
    email: String!
    payment: Payment!
    total: Int!
    status: Boolean
}

type Payment {
    id: String
    type: String!
    bank: Bank
}